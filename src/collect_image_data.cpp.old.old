#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <string>
#include <sstream>
#include <iostream>


int imageCounter = 0;
int collectDataFlag = 0;
int isImageReady = 0;
std::string folderName;
std::string objectName;
std::string fileName;
cv::Mat bebopImage;

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
  try
  {
    cv::imshow("view", cv_bridge::toCvShare(msg, "bgr8")->image);
    cv::waitKey(30);

    cv::Mat frame;
    frame = cv_bridge::toCvShare(msg, "bgr8")->image;

    bebopImage = frame;

    isImageReady = 1;

    imageCounter++;
    fileName.clear();
    std::stringstream strCounter;
    strCounter << imageCounter;
    fileName = folderName + "/" + objectName + "_" + strCounter.str() + ".jpg";
    
    if( collectDataFlag == 1 )
        cv::imwrite(fileName, frame);
    
  }
  catch (cv_bridge::Exception& e)
  {
    ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
  }
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "collect_image_data");
  ros::NodeHandle nh;

  std::cout << "Folder name: ";
  std::cin >> folderName;
  std::cout << "Object name: ";
  std::cin >> objectName;
  std::cout << "Save data [0=no, 1=yes]?: ";
  std::cin >> collectDataFlag;

  cv::namedWindow("view");
  cv::startWindowThread();
  image_transport::ImageTransport it(nh);
  image_transport::Subscriber sub = it.subscribe("/bebop/image_raw", 1, imageCallback);
  //ros::spin();

  ros::Publisher sendImage_pub = nh.advertise<sensor_msgs::ImageConstPtr>("/myCNN/image_raw", 1);
  ros::Rate loop_rate(100);

/*
  while(ros::ok())
  {
      if( isImageReady == 1 )
      {
          sendImage_pub.publish(bebopImage);
          isImageReady = 0;
      }
      
      ros::spinOnce();
      loop_rate.sleep();
  }
*/
  cv::destroyWindow("view");
}
